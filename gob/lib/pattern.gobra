// +gobra
// ##(--onlyFilesWithHeader)
package lib

import (
    "term"
)

type Bytes domain {
    // TODO: Add patterns as we go along
    
    // constructors
    func tuple2B(Bytes, Bytes) Bytes
    func tuple3B(Bytes, Bytes, Bytes) Bytes
    func tuple4B(Bytes, Bytes, Bytes, Bytes) Bytes
    func stringB(string) Bytes
    func emblemB() Bytes
    func endorsementB() Bytes
    func rootEndB() Bytes

    // deconstructors
    func getFirstB(Bytes) Bytes
    func getSecondB(Bytes) Bytes
    func getThirdB(Bytes) Bytes
    func getFourthB(Bytes) Bytes

    // tuple2B deconstructors
    axiom {
        forall t1, t2 Bytes :: { tuple2B(t1, t2) } getFirstB(tuple2B(t1, t2)) == t1 && getSecondB(tuple2B(t1, t2)) == t2
    }

    // tuple3B deconstructors
    axiom {
        forall t1, t2, t3 Bytes :: { tuple3B(t1, t2, t3) } getFirstB(tuple3B(t1, t2, t3)) == t1 && getSecondB(tuple3B(t1, t2, t3)) == t2 && getThirdB(tuple3B(t1, t2, t3)) == t3
    }

    // tuple4B deconstructors
    axiom {
        forall t1, t2, t3, t4 Bytes :: { tuple4B(t1, t2, t3, t4) } getFirstB(tuple4B(t1, t2, t3, t4)) == t1 && getSecondB(tuple4B(t1, t2, t3, t4)) == t2 && getThirdB(tuple4B(t1, t2, t3, t4)) == t3 && getFourthB(tuple4B(t1, t2, t3, t4)) == t4
    }
}

// Models a surjective homomorphism which maps (fresh and public) names to bytestrings and the signature's symbols to functions on bytestrings
type Gamma domain {
    func gamma(term.Term) Bytes

    func oneTerm(Bytes) term.Term

    axiom { // totality
        forall t Bytes :: {oneTerm(t)} gamma(oneTerm(t)) == t
    }

    // TODO: Add an entry for each function symbol
    axiom { // homomorphism
        (forall t1, t2 term.Term :: { gamma(term.pair(t1,t2)) } gamma(term.pair(t1,t2)) == tuple2B(gamma(t1), gamma(t2))) &&
        (forall t1, t2, t3 term.Term :: { gamma(tuple3(t1,t2,t3)) } gamma(tuple3(t1,t2,t3)) == tuple3B(gamma(t1), gamma(t2), gamma(t3))) &&
        (forall t1, t2, t3, t4 term.Term :: { gamma(tuple4(t1,t2,t3,t4)) } gamma(tuple4(t1,t2,t3,t4)) == tuple4B(gamma(t1), gamma(t2), gamma(t3), gamma(t4)))
    }
}