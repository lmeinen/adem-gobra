// +gobra
// ##(--onlyFilesWithHeader)
package lib

import "fact"
import "place"
import "term"
import "pub"
import "fresh"

type Term = term.Term

type TermUtil domain {

    // constructors
    func tuple3(Term, Term, Term) Term
    axiom { 
        forall x1, x2, x3 Term :: {tuple3(x1, x2, x3)} tuple3(x1, x2, x3) == term.pair(x1, term.pair(x2,x3))
    }

    func tuple4(Term, Term, Term, Term) Term
    axiom { 
        forall x1, x2, x3, x4 Term :: {tuple4(x1, x2, x3, x4)} tuple4(x1, x2, x3, x4) == term.pair(x1, term.pair(x2, term.pair(x3,x4)))
    }

    // deconstructors
    func getFirst(Term) Term
    func getSecond(Term) Term
    func getThird(Term) Term
    func getFourth(Term) Term

    // tuple5 deconstructors
    axiom {
        (forall t1, t2, t3 Term :: { tuple3(t1, t2, t3) } getFirst(tuple3(t1, t2, t3)) == t1 && getSecond(tuple3(t1, t2, t3)) == t2 && getThird(tuple3(t1, t2, t3)) == t3) &&
        forall t1, t2, t3, t4 Term :: { tuple4(t1, t2, t3, t4) } getFirst(tuple4(t1, t2, t3, t4)) == t1 && getSecond(tuple4(t1, t2, t3, t4)) == t2 && getThird(tuple4(t1, t2, t3, t4)) == t3 && getFourth(tuple4(t1, t2, t3, t4)) == t4
    }
}

ghost func GenericPlace() place.Place

ghost func GenericSet() (ghost mset[fact.Fact])

ghost func GenericTerm() term.Term

ghost
pure func SignedOut(ai term.Term) term.Term {
    return term.pair(term.pubTerm(pub.const_SIGNED_pub()), ai)
}

ghost
pure func OrganizationalOut(ai term.Term, oi term.Term) term.Term {
    return term.pair(term.pubTerm(pub.const_ORGANIZATIONAL_pub()), term.pair(ai, oi))
}

ghost
pure func EndorsedOut(auth term.Term) term.Term {
    return term.pair(term.pubTerm(pub.const_ENDORSED_pub()), auth)
}