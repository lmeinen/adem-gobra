// +gobra
// ##(--onlyFilesWithHeader)
package net


import "time"


// IP address lengths (bytes).
const (
	IPv4len = 4
	IPv6len = 16
)

type IP []byte

type IPMask []byte

type IPNet struct {
	IP   IP
	Mask IPMask
}

pred (ip IP) Mem() {
	(len(ip) == IPv4len || len(ip) == IPv6len) &&
	forall i int :: 0 <= i && i < len(ip) ==> acc(&ip[i])
}

pred (mask IPMask) Mem() {
	(len(mask) == IPv4len || len(mask) == IPv6len) &&
	forall i int :: 0 <= i && i < len(mask) ==> acc(&mask[i])
}

pred (ipnet *IPNet) Mem() {
	acc(ipnet) && ipnet.IP.Mem() && ipnet.Mask.Mem()
}

requires ip.Mem()
decreases _
pure func (ip IP) String() string

// Equal reports whether ip and x are the same IP address.
// An IPv4 address and that same address in IPv6 form are
// considered to be equal.
requires ip.Mem()
requires x != nil ==> x.Mem()
decreases _
pure func (ip IP) Equal(x IP) bool // {

// Contains reports whether the network includes ip.
requires n.Mem()
requires ip != nil ==> ip.Mem()
decreases _
pure func (n *IPNet) Contains(ip IP) bool

// String returns the CIDR notation of n like "192.0.2.0/24"
// or "2001:db8::/48" as defined in RFC 4632 and RFC 4291.
requires n.Mem()
decreases _
pure func (n *IPNet) String() string

// ParseIP parses s as an IP address, returning the result.
ensures res != nil ==> res.Mem()
func ParseIP(s string) (res IP)

// ParseCIDR parses s as a CIDR notation IP address and prefix length,
// like "192.0.2.0/24" or "2001:db8::/32", as defined in
// RFC 4632 and RFC 4291.
ensures err == nil ==> ip != nil && ip.Mem() && ipnet != nil && ipnet.Mem()
func ParseCIDR(s string) (ip IP, ipnet *IPNet, err error)