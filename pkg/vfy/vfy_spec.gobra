// +gobra
// ##(--onlyFilesWithHeader)
package vfy

import (
	"sync"

	"github.com/adem-wg/adem-proto/pkg/tokens"
	. "lib"
	"github.com/adem-wg/adem-proto/pkg/roots"
	"github.com/lestrrat-go/jwx/v2/jwk"
	"github.com/lestrrat-go/jwx/v2/jwt"

	"fact"
	"place"
	"iospec"
	"term"
)

pred SingleUse(loc *int) {
	acc(loc)
}

pred ResultPerm(result *TokenVerificationResult) {
	acc(result) &&
			(result.err == nil ==> (
				result.token != nil &&
				ValidToken(result.token))) &&
			(result.err != nil ==> result.token == nil)
}

pred SendToken(loc *int, threadCount int, result *TokenVerificationResult) {
	threadCount > 0 && acc(SingleUse(loc), 1 / threadCount) && ResultPerm(result)
}

pred ResultsInv(loc *int, threadCount int, results chan *TokenVerificationResult) {
	threadCount > 0 &&
	acc(results.SendChannel(), perm(1/2)) &&
	results.SendGivenPerm() == SendToken!<loc, threadCount, _!> &&
	results.SendGotPerm() == PredTrue!<!> &&
	SingleUse(loc)
}

pred SendFraction(results chan *TokenVerificationResult, n int) {
	0 < n && acc(results.SendChannel(), 1 / (2 * n))
}

pred VfyWg(wg *sync.WaitGroup, n int, results chan *TokenVerificationResult, ghost fractionSeq seq[pred()]) {
	n > 0 &&
	wg.WaitGroupP() &&
	wg.WaitMode() &&
	len(fractionSeq) == n &&
	forall i int :: { fractionSeq[i] } 0 <= i && i < len(fractionSeq) ==> (
		fractionSeq[i] == SendFraction!<results, n!> &&
		wg.TokenById(fractionSeq[i], i))
}

pred PkgMem() {
	ErrTokenNonCompact != nil &&
	ErrNoKeyFound != nil &&
	ErrRootKeyUnbound != nil &&
	ErrAlgsDiffer != nil
}

pred PkgMems() {
	PkgMem() &&
	roots.PkgMem() &&
	acc(tokens.PkgMem(), _) &&
	acc(&jwt.Custom, _) &&
		acc(jwt.Custom, _) &&
		tokens.CustomFields(jwt.Custom)
}

ghost
requires n > 0
requires acc(wg.UnitDebt(PredTrue!<!>), n)
ensures n == old(n)
ensures len(fractionSeq) == n &&
	forall i int :: { fractionSeq[i] } 0 <= i && i < n ==> (
		fractionSeq[i] == SendFraction!<results, n!> &&
		wg.TokenById(fractionSeq[i], i))
ensures acc(wg.UnitDebt(SendFraction!<results, n!>), n)
decreases _
func generateTokenSeq(wg *sync.WaitGroup, n int, results chan *TokenVerificationResult) (fractionSeq seq[pred()]) {
	fractionSeq := seq[pred()] {}
	invariant 0 <= i && i <= n
	invariant acc(wg.UnitDebt(PredTrue!<!>), n - i)
	invariant acc(wg.UnitDebt(SendFraction!<results, n!>), i)
	invariant len(fractionSeq) == i &&
		forall j int :: { fractionSeq[j] } 0 <= j && j < i ==> (
			fractionSeq[j] == SendFraction!<results, n!> &&
			wg.TokenById(fractionSeq[j], j))
	for i := 0; i < n; i++ {
		ghost sendFraction := SendFraction!<results, n!>
		wg.GenerateTokenAndDebt(sendFraction)
		fold wg.TokenById(sendFraction, len(fractionSeq))
		fractionSeq = fractionSeq ++ seq[pred()] { sendFraction }
	}
}

ghost
requires n > 0
requires len(fractionSeq) == n &&
	forall i int :: { fractionSeq[i] } 0 <= i && i < n ==> (
		sync.InjEval(fractionSeq[i], i) &&
		fractionSeq[i] == SendFraction!<results, n!>)
ensures acc(results.SendChannel(), 1/2)
decreases _
func collectDebt(fractionSeq seq[pred()], n int, results chan *TokenVerificationResult) {
	invariant 0 <= i && i <= n
	invariant forall j int :: { fractionSeq[j] } i <= j && j < n ==> sync.InjEval(fractionSeq[j], j)
	invariant acc(results.SendChannel(), i / (2 * n))
	for i := 0; i < n; i++ {
		unfold sync.InjEval(fractionSeq[i], i)
		unfold SendFraction!<results, n!>()
	}
}

ghost
trusted
requires k != nil && k.Mem()
ensures k === old(k) && acc(k.Mem(), _)
func bar(k jwk.Key)

ghost
requires acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
requires ValidToken(t) && Abs(t) == gamma(tokenT)
func foo(t *ADEMToken, tokenT term.Term) {
	assert Abs(t) == gamma(tokenT)
	unfold ValidToken(t) // ValidToken holds Mem permissions
	if k, ok := t.Token.Get("key"); ok { // Get is non-pure but only requires wildcard permissions
		unfold jwt.FieldMem(t.Token.Values())
		unfold tokens.KeyMem(k.(tokens.EmbeddedKey))
		bar(k.(tokens.EmbeddedKey).Key)
		fold acc(tokens.KeyMem(k.(tokens.EmbeddedKey)), _)
		fold acc(jwt.FieldMem(t.Token.Values()), _)
	}
	fold acc(ValidToken(t), _)
	// assert Abs(t) == gamma(tokenT) // fails
}

ghost
requires tokenP > 0 && acc(rawToken, tokenP)
requires place.token(p) && iospec.e_InFact(p, ridT)
ensures acc(rawToken, tokenP)
ensures gamma(tokenT) == AbsBytes(rawToken)
ensures tokenT == old(iospec.get_e_InFact_r1(p, ridT))
ensures place.token(pp) && pp == old(iospec.get_e_InFact_placeDst(p, ridT))
decreases  _
func tokenIn(rawToken []byte, ghost tokenP perm, ghost p place.Place, ghost ridT term.Term) (ghost tokenT term.Term, ghost pp place.Place) {
	tokenT := iospec.get_e_InFact_r1(p, ridT)
	assume gamma(tokenT) == AbsBytes(rawToken)
	pp := iospec.get_e_InFact_placeDst(p, ridT)
	inhale place.token(pp)
	return tokenT, pp
}

pred ValidationPerm(ghost t term.Term)

ghost
requires place.token(p) && iospec.e_PermitTokenVerificationOut(p, rid, t)
ensures pp == old(iospec.get_e_PermitTokenVerificationOut_placeDst(p, rid, t)) && place.token(pp)
ensures ValidationPerm(t)
decreases _
func permissionOut(ghost p place.Place, ghost rid term.Term, ghost t term.Term) (ghost pp place.Place) {
	exhale place.token(p)
	pp := iospec.get_e_PermitTokenVerificationOut_placeDst(p, rid, t)
	inhale place.token(pp)
	inhale ValidationPerm(t)
}

ghost
requires place.token(p) && iospec.e_PermitTokenVerificationIn(p, rid)
requires ValidationPerm(t) // TODO: Do we need this at all for the soundness argument?
ensures gamma(t) == gamma(tt)
ensures tt == old(iospec.get_e_PermitTokenVerificationIn_r1(p, rid))
ensures pp == old(iospec.get_e_PermitTokenVerificationIn_placeDst(p, rid)) && place.token(pp)
decreases _
func permissionIn(ghost t term.Term, ghost p place.Place, ghost rid term.Term) (ghost tt term.Term, ghost pp place.Place) {
	tt := iospec.get_e_PermitTokenVerificationIn_r1(p, rid)
	assume gamma(t) == gamma(tt)
	pp := iospec.get_e_PermitTokenVerificationIn_placeDst(p, rid)
	inhale place.token(pp)
	return tt, pp
}

