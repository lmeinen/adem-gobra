// -gobra
// ##(--onlyFilesWithHeader)
package vfy

import (
	"github.com/adem-wg/adem-proto/pkg/tokens"
	"github.com/lestrrat-go/jwx/v2/jwt"

    . "lib"

	. "fact"
    . "iospec"
)


// #################################################################
// ##### Failed to derive constraints for new endorsement path #####
// #################################################################

ghost
pure func PathTrigger(_ int) bool { return true }

ghost
requires acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
requires forall i int :: { path[i] } 0 <= i && i < len(path) ==> acc(ValidToken(path[i]), _)
pure func EndorsementPath(path seq[*ADEMToken]) bool {
	return forall i int :: { path[i] } 0 <= i && i < len(path) - 1 ==> path[i].Endorses(path[i + 1])
}

ghost
requires acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
requires acc(ValidToken(endorsement), _)
requires forall i int :: { path[i] } 0 <= i && i < len(path) ==> acc(ValidToken(path[i]), _) && endorsement != path[i] && (i < len(path) - 1 ==> path[i].Endorses(path[i + 1]))
requires len(path) > 0
requires endorsement.Endorses(path[0])
ensures acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
ensures forall i int :: { newp[i] } 0 <= i && i < len(newp) ==> acc(ValidToken(newp[i]), _) && (i < len(newp) - 1 ==> newp[i].Endorses(newp[i + 1]))
ensures newp == seq[*ADEMToken] { endorsement } ++ path
func DeriveNewEndorsementPath(path seq[*ADEMToken], endorsement *ADEMToken) (newp seq[*ADEMToken]) {
	newp = seq[*ADEMToken] { endorsement } ++ path
	assert newp[1:] == path

	assert newp[0].Endorses(newp[1])
	assert newp[0] in newp

	idx := GenericInt()
	if idx == 0 {
		assert newp[idx] == endorsement
		assert newp[idx].Endorses(newp[idx + 1])
	} else if 0 < idx && idx < len(newp) - 1 {
		assert newp[idx] in path
		assert newp[idx] == path[idx - 1]
		assert path[idx - 1].Endorses(path[idx])
		assert newp[idx].Endorses(newp[idx + 1])
	}

	return newp
}