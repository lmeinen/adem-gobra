// +gobra
// ##(--onlyFilesWithHeader)
package vfy

import (
	"github.com/adem-wg/adem-proto/pkg/consts"
	"github.com/adem-wg/adem-proto/pkg/ident"
	"github.com/adem-wg/adem-proto/pkg/tokens"

	"github.com/lestrrat-go/jwx/v2/jwa"
	"github.com/lestrrat-go/jwx/v2/jwt"

	. "lib"

	"fact"
	"place"
	"iospec"
	"claim"
)

ghost
preserves acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
preserves acc(ValidToken(emblem), 3/4) && Emblem(emblem)
preserves ValidToken(root) && Endorsement(root)
preserves root != emblem
preserves gamma(rootT) == Abs(root) && gamma(embT) == Abs(emblem)
preserves unfolding acc(ValidToken(emblem), 1/2) in 
	unfolding acc(jwt.FieldMem(emblem.Token.Values()), 1/8) in
		emblem.Headers.ContentType() == string(consts.EmblemCty) && 
		emblem.Token.Contains("ass") && 
		emblem.Headers.Algorithm() != jwa.NoSignature && 
		emblem.Token.Issuer() != "" &&
	unfolding ValidToken(root) in 
		root.Token.Contains("log") && 
		root.Token.Contains("key") && 
		root.Token.Issuer() == emblem.Token.Issuer() && 
		root.Token.Subject() == root.Token.Issuer()
requires iospec.P_Verifier(p, rid, s) && place.token(p) && fact.St_Verifier_2(rid) in s
ensures iospec.P_Verifier(p0, rid, s0) && 
	place.token(p0) && 
	fact.St_Verifier_4(rid, oi, rootKey) in s0 && 
	fact.OutFact_Verifier(rid, SignedOut(ai)) in s0 && 
	fact.OutFact_Verifier(rid, OrganizationalOut(ai, oi)) in s0
ensures unfolding ValidToken(root) in 
	gamma(rootKey) == stringB(root.VerificationKey.KeyID(none[perm])) &&
	gamma(oi) == stringB(root.Token.Issuer())
ensures unfolding acc(ValidToken(emblem), 1/2) in
	unfolding acc(jwt.FieldMem(emblem.Token.Values()), 1/8) in
	let ass := emblem.Token.PureGet("ass").([]*ident.AI) in
	unfolding acc(tokens.AssMem(ass), 1/8) in
	ident.AbsAI(ass) == gamma(ai)
func GetOrganizationalOut(emblem, root *ADEMToken, p place.Place, s mset[fact.Fact], rid, rootT, embT Term) (p0 place.Place, s0 mset[fact.Fact], oi, rootKey, ai Term) {
	// TODO: (lmeinen) Drop assumption
	// Simplification: Assume root directly endorses emblem
	assume root.Endorses(emblem)

	assume fact.ValidTokenIn_Verifier(rid, rootT) in s

	ghost var endorsedKeyT Term
	p, s, oi, rootKey, endorsedKeyT = ApplyIsOrganizationalEmblem(emblem, root, p, s, rid, rootT)

	assume fact.ValidTokenIn_Verifier(rid, embT) in s

	p, s, ai = ApplyCollectAuthorityEndorsements(emblem, p, s, rid, embT, rootKey, oi, endorsedKeyT)

	return p, s, oi, rootKey, ai
}

ghost
preserves acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
preserves acc(ValidToken(emblem), 1/2) && Emblem(emblem)
preserves acc(ValidToken(root), 3/4) && Endorsement(root)
preserves unfolding acc(ValidToken(emblem), 1/2) in 
	unfolding acc(ValidToken(root), 3/4) in 
	emblem.Token.Issuer() != "" && 
	root.Token.Contains("log") && 
	root.Token.Contains("key") && 
	root.Token.Issuer() == emblem.Token.Issuer() && 
	root.Token.Subject() == root.Token.Issuer()
preserves gamma(rootT) == Abs(root)
requires iospec.P_Verifier(p, rid, s) && place.token(p) && fact.St_Verifier_2(rid) in s && fact.ValidTokenIn_Verifier(rid, rootT) in s
ensures gamma(oi) == unfolding acc(ValidToken(emblem), 1/2) in stringB(emblem.Token.Issuer())
ensures gamma(rootKey) == unfolding acc(ValidToken(root), 3/4) in stringB(root.VerificationKey.KeyID(none[perm]))
ensures gamma(endorsedKeyT) == unfolding acc(ValidToken(root), 3/4) in stringB(root.Token.PureKeyID())
ensures iospec.P_Verifier(p0, rid, s0) && place.token(p0) && s0 == s setminus 
	mset[fact.Fact] { 
		fact.St_Verifier_2(rid), 
		fact.ValidTokenIn_Verifier(rid, rootT) } union 
	mset[fact.Fact] { fact.St_Verifier_3(rid, oi, rootKey, endorsedKeyT) }
func ApplyIsOrganizationalEmblem(emblem, root *ADEMToken, p place.Place, s mset[fact.Fact], rid, rootT Term) (p0 place.Place, s0 mset[fact.Fact], oi, rootKey, endorsedKeyT Term) {

	// Parse root pattern
	ghost someRootKey, someOi, someEndorsedKey, someSig := RootEndPattern(root)

	// Apply pattern requirement for root patterns
	ghost rootKey, oi, endorsedKeyT, sigT := RootEndorsementPatternRequirement(rootT, rid, someRootKey, someOi, someEndorsedKey, someSig, s, p)

	// Apply IsOrganizationalEmblem rule
	unfold iospec.P_Verifier(p, rid, s)
	unfold iospec.phiR_Verifier_6(p, rid, s)
	l := mset[fact.Fact] { fact.St_Verifier_2(rid), fact.ValidTokenIn_Verifier(rid, rootT) }
	a := mset[claim.Claim] { }
	r := mset[fact.Fact] { fact.St_Verifier_3(rid, oi, rootKey, endorsedKeyT) }
	p = iospec.internBIO_e_IsOrganizationalEmblem(p, rid, rootKey, oi, endorsedKeyT, sigT, l, a, r)
	s = fact.U(l, r, s)

	return p, s, oi, rootKey, endorsedKeyT
}

ghost
preserves acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
preserves acc(ValidToken(emblem), 1/2) && Emblem(emblem)
preserves acc(ValidToken(endorsement), 3/4) && Endorsement(endorsement)
preserves unfolding acc(ValidToken(emblem), 1/2) in
	unfolding acc(ValidToken(endorsement), 3/4) in
	emblem.Token.Issuer() != "" &&
	!endorsement.Token.Contains("log") &&
	endorsement.Token.Contains("key") &&
	endorsement.Token.Issuer() == emblem.Token.Issuer() &&
	endorsement.Token.Subject() == endorsement.Token.Issuer()
preserves gamma(t) == Abs(endorsement)
preserves gamma(oi) == unfolding acc(ValidToken(emblem), 1/2) in stringB(emblem.Token.Issuer())
preserves gamma(key) == unfolding acc(ValidToken(endorsement), 3/4) in stringB(endorsement.VerificationKey.KeyID(none[perm]))
requires iospec.P_Verifier(p, rid, s) && place.token(p) && fact.St_Verifier_3(rid, oi, rootKey, key) in s && fact.ValidTokenIn_Verifier(rid, t) in s
ensures gamma(endorsedKey) == unfolding acc(ValidToken(endorsement), 3/4) in stringB(endorsement.Token.PureKeyID())
ensures iospec.P_Verifier(p0, rid, s0) && place.token(p0) && s0 == s setminus
	mset[fact.Fact] {
		fact.St_Verifier_3(rid, oi, rootKey, key),
		fact.ValidTokenIn_Verifier(rid, t) } union
	mset[fact.Fact] { fact.St_Verifier_3(rid, oi, rootKey, endorsedKey) }
func ApplyCollectInternalEndorsements(emblem, endorsement *ADEMToken, p place.Place, s mset[fact.Fact], rid, rootKey, key, oi, t Term) (p0 place.Place, s0 mset[fact.Fact], endorsedKey Term) {

	// Parse internal endorsement pattern
	someEndorsedKey, someSig := OrgEndPattern(endorsement, oi, key)

	// Apply pattern requirement for internal endorsement patterns
	endorsedKey, sig := InternalEndorsementPatternRequirement(t, rid, oi, rootKey, key, someEndorsedKey, someSig, s, p)

	// Apply IsOrganizationalEmblem rule
	unfold iospec.P_Verifier(p, rid, s)
	unfold iospec.phiR_Verifier_10(p, rid, s)
	l := mset[fact.Fact] { fact.St_Verifier_3(rid, oi, rootKey, key), fact.ValidTokenIn_Verifier(rid, t) }
	a := mset[claim.Claim] { }
	r := mset[fact.Fact] { fact.St_Verifier_3(rid, oi, rootKey, endorsedKey) }
	p = iospec.internBIO_e_CollectInternalEndorsements(p, rid, oi, rootKey, key, endorsedKey, sig, l, a, r)
	s = fact.U(l, r, s)

	return p, s, endorsedKey
}

ghost
preserves acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
preserves acc(ValidToken(emblem), 3/4) && Emblem(emblem) && Abs(emblem) == gamma(embT)
preserves unfolding acc(ValidToken(emblem), 1/4) in
	unfolding acc(jwt.FieldMem(emblem.Token.Values()), 1/8) in
	emblem.Headers.ContentType() == string(consts.EmblemCty) && emblem.Token.Contains("ass") && emblem.Headers.Algorithm() != jwa.NoSignature && emblem.Token.Issuer() != "" && 
	gamma(oi) == stringB(emblem.Token.Issuer()) && gamma(endorsedKeyT) == stringB(emblem.VerificationKey.KeyID(none[perm]))
requires iospec.P_Verifier(p, rid, s) && place.token(p) && fact.St_Verifier_3(rid, oi, rootKey, endorsedKeyT) in s && fact.ValidTokenIn_Verifier(rid, embT) in s
ensures iospec.P_Verifier(p0, rid, s0) && place.token(p0) && s0 == s setminus 
	mset[fact.Fact] { 
		fact.St_Verifier_3(rid, oi, rootKey, endorsedKeyT), 
		fact.ValidTokenIn_Verifier(rid, embT) } union 
	mset[fact.Fact]{ 
		fact.St_Verifier_4(rid, oi, rootKey),
		fact.OutFact_Verifier(rid, SignedOut(ai)),
		fact.OutFact_Verifier(rid, OrganizationalOut(ai, oi)) }
ensures unfolding acc(ValidToken(emblem), 1/4) in
	unfolding acc(jwt.FieldMem(emblem.Token.Values()), 1/8) in
	let ass := emblem.Token.PureGet("ass").([]*ident.AI) in
	unfolding acc(tokens.AssMem(ass), 1/8) in
	ident.AbsAI(ass) == gamma(ai)
func ApplyCollectAuthorityEndorsements(emblem *ADEMToken, p place.Place, s mset[fact.Fact], rid, embT, rootKey, oi, endorsedKeyT Term) (p0 place.Place, s0 mset[fact.Fact], ai Term) {
	// Parse emblem pattern
	ghost someAi, someSig := SignedEmblemPattern(emblem, endorsedKeyT, oi)

	// Apply pattern requirement for anon emblem patterns
	ghost ai, sigT := SignedEmblemPatternRequirement(embT, rid, rootKey, oi, endorsedKeyT, someAi, someSig, s, p)

	// Apply CollectAuthorityEndorsements rule
	unfold iospec.P_Verifier(p, rid, s)
	unfold iospec.phiR_Verifier_11(p, rid, s)
	l := mset[fact.Fact] { fact.St_Verifier_3(rid, oi, rootKey, endorsedKeyT), fact.ValidTokenIn_Verifier(rid, embT) }
	a := mset[claim.Claim] { claim.VerifiedEndorsed(rid, oi, ai, endorsedKeyT), claim.VerifiedRootEndorsement(rid, oi, rootKey) }
	r := mset[fact.Fact] { fact.St_Verifier_4(rid, oi, rootKey),
	                       fact.OutFact_Verifier(rid, SignedOut(ai)),
	                       fact.OutFact_Verifier(rid, OrganizationalOut(ai, oi)) }

	p = iospec.internBIO_e_CollectAuthorityEndorsements(p, rid, oi, rootKey, endorsedKeyT, ai, sigT, l, a, r)
	s = fact.U(l, r, s)

	return p, s, ai
}

ghost
preserves acc(&jwt.Custom, _) && acc(jwt.Custom, _) && tokens.CustomFields(jwt.Custom)
preserves acc(ValidToken(endorsement), 3/4) && Endorsement(endorsement) && Abs(endorsement) == gamma(t)
preserves unfolding acc(ValidToken(endorsement), 1/4) in
	unfolding acc(jwt.FieldMem(endorsement.Token.Values()), 1/8) in
	endorsement.Headers.ContentType() == string(consts.EndorsementCty) && 
	endorsement.Token.Contains("key") && 
	endorsement.Token.Issuer() != "" && 
	endorsement.Token.Contains("log") && 
	endorsement.Token.Subject() != endorsement.Token.Issuer() && 
	gamma(oi) == stringB(endorsement.Token.Subject()) && 
	gamma(rootKey) == stringB(endorsement.Token.PureKeyID())
requires iospec.P_Verifier(p, rid, s) && place.token(p) && fact.St_Verifier_4(rid, oi, rootKey) in s && fact.ValidTokenIn_Verifier(rid, t) in s
ensures unfolding acc(ValidToken(endorsement), 1/2) in stringB(endorsement.Token.Issuer()) == gamma(auth)
ensures iospec.P_Verifier(p0, rid, s0) && place.token(p0) && s0 == s setminus 
	mset[fact.Fact] { 
		fact.ValidTokenIn_Verifier(rid, t) } union 
	mset[fact.Fact]{ 
		fact.OutFact_Verifier(rid, EndorsedOut(auth)) }
func ApplyIsEndorsedEmblem(endorsement *ADEMToken, p place.Place, s mset[fact.Fact], rid, oi, rootKey, t Term) (p0 place.Place, s0 mset[fact.Fact], auth Term) {
	// Parse authority endorsement pattern
	ghost someKey, someAuth, someSig := AuthEndPattern(endorsement, oi, rootKey)

	// Apply pattern requirement for root endorsement patterns
	ghost key, auth, sig := AuthorityEndorsementPatternRequirement(t, rid, someKey, someAuth, someSig, oi, rootKey, s, p)

	// Apply IsEndorsedEmblem rule
	unfold iospec.P_Verifier(p, rid, s)
	unfold iospec.phiR_Verifier_12(p, rid, s)
	l := mset[fact.Fact] { fact.St_Verifier_4(rid, oi, rootKey), fact.ValidTokenIn_Verifier(rid, t) }
	a := mset[claim.Claim] { claim.Neq(auth, oi), claim.VerifiedAuthorityEndorsement(rid, auth, key, oi, rootKey) }
	r := mset[fact.Fact] { fact.St_Verifier_4(rid, oi, rootKey), fact.OutFact_Verifier(rid, EndorsedOut(auth)) }

	p = iospec.internBIO_e_IsEndorsedEmblem(p, rid, oi, rootKey, key, auth, sig, l, a, r)
	s = fact.U(l, r, s)

	return p, s, auth
}

ghost
requires place.token(p) && iospec.P_Verifier(p, rid, s) && fact.OutFact_Verifier(rid, t) in s
ensures iospec.e_OutFact(p, rid, t)
ensures place.token(p) && iospec.P_Verifier(iospec.get_e_OutFact_placeDst(p, rid, t), rid, s0)
ensures s0 == s setminus mset[fact.Fact] { fact.OutFact_Verifier(rid, t) }
func GetOutPerm(p place.Place, s mset[fact.Fact], rid, t Term) (s0 mset[fact.Fact]) {
	unfold iospec.P_Verifier(p, rid, s)
	unfold iospec.phiRG_Verifier_15(p, rid, s)

	s0 = s setminus mset[fact.Fact] { fact.OutFact_Verifier(rid, t) }

	return s0
}