package util

preserves acc(slice, pSlice)
requires pSlice > 0 && pSliceElem > 0
requires isComparable(v)
requires forall k int :: 0 <= k && k < len(slice) ==> acc(&slice[k], pSliceElem)
requires forall k int :: 0 <= k && k < len(slice) ==> isComparable(slice[k]) && typeOf(slice[k]) == typeOf(v)
ensures forall k int :: 0 <= k && k < len(slice) ==> acc(&slice[k], pSliceElem)
ensures res ==> 0 <= idx && idx < len(slice) && slice[idx] == v
func Contains(slice [] interface{}, v interface{}, ghost pSlice perm, ghost pSliceElem perm) (res bool, ghost idx int) {
    invariant acc(slice,pSlice)
    for i, elem := range slice {
        if elem == v {
            return true, i
        }
    }
    return false, -1
}