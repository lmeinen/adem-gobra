package util

type Elem interface {
	pred mem()

	requires acc(mem(), _)
	pure ToComparable() (res int64)
}

type Set interface {
	pred mem()

	preserves p0 > 0 && p1 > 0 && acc(mem(), p0) && acc(val.mem(), p1)
	ensures res.mem()
	Has(val Elem, ghost p0, p1 perm) (res Elem)

	preserves p > 0 && acc(mem(), p)
	ensures res.mem()
	HasKey(key int64, ghost p perm) (res Elem)

	preserves mem() && p > 0 && acc(val.mem(), p)
	Add(val Elem, ghost p perm)

	preserves mem() && acc(val.mem(), p)
	ensures res.mem()
	Rm(val Elem, ghost p perm) (res Elem)

	requires p > 0 && acc(mem(), p)
	pure Size(ghost p perm) int
}

type int64Set map[int64]Elem

func MkSet() Set {
	m@ := make(int64Set)
	return &m
}

preserves p0 > 0 && p1 > 0 && acc(s, p0) && acc(val.mem(), p1)
ensures res.mem()
func (s *int64Set) Has(val Elem, ghost p0, p1 perm) (res Elem) {
	e := (*s)[val.ToComparable()]
	return e
}

preserves p > 0 && acc(s, p)
ensures res.mem()
func (s *int64Set) HasKey(key int64, ghost p perm) (res Elem) {
	e := (*s)[key]
	return e
}

preserves acc(s) && p > 0 && acc(val.mem(), p)
func (s *int64Set) Add(val Elem, ghost p perm) {
	(*s)[val.ToComparable()] = val
}

preserves acc(s) && acc(val.mem(), p)
ensures res.mem()
func (s *int64Set) Rm(val Elem, ghost p perm) (res Elem) {
	e := (*s)[val.ToComparable()]
	delete(*s, val.ToComparable())
	return e
}

requires p > 0 && acc(s, p)
pure func (s *int64Set) Size(ghost p perm) int {
	return len(*s)
}

pred (s *int64Set) mem() {
	acc(s)
}

(*int64Set) implements Set {
	(s *int64Set) Has(val Elem, ghost p0, p1 perm) (res Elem) {
		unfold acc(s.mem(), p0)
		unfold acc(val.mem(), p1)
		res = s.Has(val, p0, p1)
		fold acc(val.mem(), p1)
		fold acc(s.mem(), p0)
	}

	(s *int64Set) HasKey(key int64, ghost p perm) (res Elem) {
		unfold acc(s.mem(), p)
		res = s.HasKey(key, p)
		fold acc(s.mem(), p)
	}

	(s *int64Set) Add(val Elem, ghost p perm) {
		unfold s.mem()
		s.Add(val, p)
		fold s.mem()
	}

	(s *int64Set) Rm(val Elem, ghost p perm) (res Elem) {
		unfold s.mem()
		res = s.Rm(val, p)
		fold s.mem()
	}

	pure (s *int64Set) Size(ghost p perm) int {
		return unfolding acc(s.mem(), p) in s.Size(p)
	}
}