package base64

import p "predicates"

// An Encoding is a radix 64 encoding/decoding scheme, defined by a
// 64-character alphabet. The most common encoding is the "base64"
// encoding defined in RFC 4648 and used in MIME (RFC 2045) and PEM
// (RFC 1421).  RFC 4648 also defines an alternate encoding, which is
// the standard encoding with - and _ substituted for + and /.
type Encoding struct {
	// we keep this struct opaque, its contents are never accessed anyways
}

var StdEncoding@ = Encoding{}

// DecodedLen returns the maximum length in bytes of the decoded data
// corresponding to n bytes of base64-encoded data.
preserves acc(enc)
ensures n >= 0 ==> res >= 0
func (enc *Encoding) DecodedLen(n int) (res int)

// Decode decodes src using the encoding enc. It writes at most
// DecodedLen(len(src)) bytes to dst and returns the number of bytes
// written. If src contains invalid base64 data, it will return the
// number of bytes successfully written and CorruptInputError.
// New line characters (\r and \n) are ignored.
preserves acc(enc) && p.BytesMem(dst) && p.BytesMem(src)
ensures 0 <= n && n <= len(dst)
func (enc *Encoding) Decode(dst, src []byte) (n int, err error)