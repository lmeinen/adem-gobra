// +gobra
// ##(--onlyFilesWithHeader)
// ##(--disablePureFunctsTerminationRequirement)
package fact



import . "github.com/adem-wg/adem-proto/term"
import . "github.com/adem-wg/adem-proto/pub"
import . "github.com/adem-wg/adem-proto/fresh"


type Fact domain {
    // tag 0
    func Setup_TokenVerifier(t1 Term) Fact
    func getSetup_TokenVerifier(f Fact) Term
    axiom  {
        forall t1 Term :: 
            { Setup_TokenVerifier(t1) } (
                getSetup_TokenVerifier(Setup_TokenVerifier(t1)) ==
                t1 &&
                  getTag(Setup_TokenVerifier(t1)) == 0)
    }

    // tag 1
    func PermitTokenVerificationIn_TokenVerifier(t1 Term, t2 Term) Fact
    func getPermitTokenVerificationIn_TokenVerifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { PermitTokenVerificationIn_TokenVerifier(t1, t2) } (
                getPermitTokenVerificationIn_TokenVerifier(PermitTokenVerificationIn_TokenVerifier(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(PermitTokenVerificationIn_TokenVerifier(t1, t2)) == 1)
    }

    // tag 2
    func St_TokenVerifier_0(t1 Term) Fact
    func getSt_TokenVerifier_0(f Fact) Term
    axiom  {
        forall t1 Term :: 
            { St_TokenVerifier_0(t1) } (
                getSt_TokenVerifier_0(St_TokenVerifier_0(t1)) ==
                t1 &&
                  getTag(St_TokenVerifier_0(t1)) == 2)
    }

    // tag 3
    func ValidTokenOut_TokenVerifier(t1 Term, t2 Term) Fact
    func getValidTokenOut_TokenVerifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { ValidTokenOut_TokenVerifier(t1, t2) } (
                getValidTokenOut_TokenVerifier(ValidTokenOut_TokenVerifier(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(ValidTokenOut_TokenVerifier(t1, t2)) == 3)
    }

    // tag 4
    func CA_TokenVerifier(t1 Term, t2 Term, t3 Term) Fact
    func getCA_TokenVerifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term :: 
            { CA_TokenVerifier(t1, t2, t3) } (
                getCA_TokenVerifier(CA_TokenVerifier(t1, t2, t3)) ==
                seq[Term]{t1, t2, t3} &&
                                     getTag(CA_TokenVerifier(t1, t2, t3)) == 4)
    }

    // tag 5
    func Log_TokenVerifier(t1 Term, t2 Term, t3 Term) Fact
    func getLog_TokenVerifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term :: 
            { Log_TokenVerifier(t1, t2, t3) } (
                getLog_TokenVerifier(Log_TokenVerifier(t1, t2, t3)) ==
                seq[Term]{t1, t2, t3} &&
                                     getTag(Log_TokenVerifier(t1, t2, t3)) == 5)
    }

    // tag 6
    func InFact_TokenVerifier(t1 Term, t2 Term) Fact
    func getInFact_TokenVerifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { InFact_TokenVerifier(t1, t2) } (
                getInFact_TokenVerifier(InFact_TokenVerifier(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(InFact_TokenVerifier(t1, t2)) == 6)
    }

    // tag 7
    func VerifiedPk_TokenVerifier(t1 Term, t2 Term) Fact
    func getVerifiedPk_TokenVerifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { VerifiedPk_TokenVerifier(t1, t2) } (
                getVerifiedPk_TokenVerifier(VerifiedPk_TokenVerifier(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(VerifiedPk_TokenVerifier(t1, t2)) == 7)
    }

    // tag 8
    func Setup_Verifier(t1 Term) Fact
    func getSetup_Verifier(f Fact) Term
    axiom  {
        forall t1 Term :: 
            { Setup_Verifier(t1) } (
                getSetup_Verifier(Setup_Verifier(t1)) ==
                t1 &&
                  getTag(Setup_Verifier(t1)) == 8)
    }

    // tag 9
    func St_Verifier_0(t1 Term) Fact
    func getSt_Verifier_0(f Fact) Term
    axiom  {
        forall t1 Term :: 
            { St_Verifier_0(t1) } (
                getSt_Verifier_0(St_Verifier_0(t1)) ==
                t1 &&
                  getTag(St_Verifier_0(t1)) == 9)
    }

    // tag 10
    func OutFact_Verifier(t1 Term, t2 Term) Fact
    func getOutFact_Verifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { OutFact_Verifier(t1, t2) } (
                getOutFact_Verifier(OutFact_Verifier(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(OutFact_Verifier(t1, t2)) == 10)
    }

    // tag 11
    func St_Verifier_1(t1 Term) Fact
    func getSt_Verifier_1(f Fact) Term
    axiom  {
        forall t1 Term :: 
            { St_Verifier_1(t1) } (
                getSt_Verifier_1(St_Verifier_1(t1)) ==
                t1 &&
                  getTag(St_Verifier_1(t1)) == 11)
    }

    // tag 12
    func InFact_Verifier(t1 Term, t2 Term) Fact
    func getInFact_Verifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { InFact_Verifier(t1, t2) } (
                getInFact_Verifier(InFact_Verifier(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(InFact_Verifier(t1, t2)) == 12)
    }

    // tag 13
    func PermitTokenVerificationOut_Verifier(t1 Term, t2 Term) Fact
    func getPermitTokenVerificationOut_Verifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { PermitTokenVerificationOut_Verifier(t1, t2) } (
                getPermitTokenVerificationOut_Verifier(PermitTokenVerificationOut_Verifier(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(PermitTokenVerificationOut_Verifier(t1, t2)) == 13)
    }

    // tag 14
    func St_Verifier_2(t1 Term) Fact
    func getSt_Verifier_2(f Fact) Term
    axiom  {
        forall t1 Term :: 
            { St_Verifier_2(t1) } (
                getSt_Verifier_2(St_Verifier_2(t1)) ==
                t1 &&
                  getTag(St_Verifier_2(t1)) == 14)
    }

    // tag 15
    func ValidTokenIn_Verifier(t1 Term, t2 Term) Fact
    func getValidTokenIn_Verifier(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { ValidTokenIn_Verifier(t1, t2) } (
                getValidTokenIn_Verifier(ValidTokenIn_Verifier(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(ValidTokenIn_Verifier(t1, t2)) == 15)
    }

    // tag 16
    func St_Verifier_3(t1 Term, t2 Term) Fact
    func getSt_Verifier_3(f Fact) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { St_Verifier_3(t1, t2) } (
                getSt_Verifier_3(St_Verifier_3(t1, t2)) ==
                seq[Term]{t1, t2} &&
                                 getTag(St_Verifier_3(t1, t2)) == 16)
    }

    // each fact has a unique tag:
    func getTag(f Fact) int

    func persistent(f Fact) bool
    axiom  {
        forall f Fact :: 
            { persistent(f) } (
                persistent(f) ==
                (getTag(f) == 4 || getTag(f) == 5))
    }

}
ghost
// returns a multiset containing just the persistent facts of l all with multiplicity 1
ensures forall f Fact :: { f # result } (f # result) == (persistent(f) && (f # l) > 0 ? 1 : 0)
pure func persistentFacts(l mset[Fact]) (result mset[Fact])

ghost
// returns a multiset containing just the non-persistent facts of l while retaining their multiplicity
ensures forall f Fact :: { f # result } (f # result) == (persistent(f) ? 0 : (f # l))
pure func linearFacts(l mset[Fact]) (result mset[Fact])

ghost
ensures res == (linearFacts(l) subset s && persistentFacts(l) subset s)
pure func M(l mset[Fact], s mset[Fact]) (res bool) {
    // non-persistent facts
    return linearFacts(l) subset s &&
        // persistent facts
        persistentFacts(l) subset s
}

ghost
ensures result == s setminus linearFacts(l) union r
pure func U(l mset[Fact], r mset[Fact], s mset[Fact]) (result mset[Fact])