// +gobra
// ##(--onlyFilesWithHeader)
package iospec



import . "github.com/adem-wg/adem-proto/claim"
import . "github.com/adem-wg/adem-proto/fact"
import . "github.com/adem-wg/adem-proto/term"
import . "github.com/adem-wg/adem-proto/place"
import . "github.com/adem-wg/adem-proto/pub"
import . "github.com/adem-wg/adem-proto/fresh"


pred P_Verifier(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    phiR_Verifier_0(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_1(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_2(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_3(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_4(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_5(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_6(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_7(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_8(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_9(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_10(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_11(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_12(tami_p, tami_rid, tami_s) &&
    phiR_Verifier_13(tami_p, tami_rid, tami_s) &&
    phiRG_Verifier_14(tami_p, tami_rid, tami_s) &&
    phiRG_Verifier_15(tami_p, tami_rid, tami_s) &&
    phiRF_Verifier_16(tami_p, tami_rid, tami_s) &&
    phiRF_Verifier_17(tami_p, tami_rid, tami_s) &&
    phiRF_Verifier_18(tami_p, tami_rid, tami_s)
}
pred phiR_Verifier_0(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_FinishSetup(tami_p, rid, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            Setup_Verifier(rid)} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_1(rid)}) ==>
            (e_FinishSetup(tami_p, rid, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_FinishSetup_placeDst(tami_p, rid, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_1(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, t Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_ReceiveToken(tami_p, rid, t, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_1(rid),
                            InFact_Verifier(rid, t)} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_1(rid),
                            PermitTokenVerificationOut_Verifier(rid, t)}) ==>
            (e_ReceiveToken(tami_p, rid, t, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_ReceiveToken_placeDst(tami_p, rid, t, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_2(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_ReceiveTokenFinish(tami_p, rid, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_1(rid)} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_2(rid)}) ==>
            (e_ReceiveTokenFinish(tami_p, rid, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_ReceiveTokenFinish_placeDst(tami_p, rid, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_3(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_IsInvalid(tami_p, rid, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_2(rid)} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_0(rid),
                            OutFact_Verifier(rid, pubTerm(const_INVALID_pub()))}) ==>
            (e_IsInvalid(tami_p, rid, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_IsInvalid_placeDst(tami_p, rid, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_4(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, E Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_IsUnsignedEmblem(tami_p, rid, E, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_2(rid),
                            ValidTokenIn_Verifier(rid, pair(pubTerm(const_emblem_pub()), E))} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_0(rid),
                            OutFact_Verifier(rid, pair(pubTerm(const_UNSIGNED_pub()), E))}) ==>
            (e_IsUnsignedEmblem(tami_p, rid, E, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_IsUnsignedEmblem_placeDst(tami_p, rid, E, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_5(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, key Term, E Term, tokenSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_IsSignedEmblem(tami_p, rid, key, E, tokenSig, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_2(rid),
                            ValidTokenIn_Verifier(rid, pair(key, pair(pair(pubTerm(const_emblem_pub()), E), tokenSig)))} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_0(rid),
                            OutFact_Verifier(rid, pair(pubTerm(const_SIGNED_pub()), E))}) ==>
            (e_IsSignedEmblem(tami_p, rid, key, E, tokenSig, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_IsSignedEmblem_placeDst(tami_p, rid, key, E, tokenSig, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_6(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, rootKey Term, oi Term, endorsedKey Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_IsOrganizationalEmblem(tami_p, rid, rootKey, oi, endorsedKey, endSig, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_2(rid),
                            ValidTokenIn_Verifier(rid, pair(rootKey, pair(oi, pair(pair(pubTerm(const_root_end_pub()), pair(oi, endorsedKey)), endSig))))} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_3(rid, oi, rootKey, endorsedKey)}) ==>
            (e_IsOrganizationalEmblem(tami_p, rid, rootKey, oi, endorsedKey, endSig, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_IsOrganizationalEmblem_placeDst(tami_p, rid, rootKey, oi, endorsedKey, endSig, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_7(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, endKey Term, endorsedKey Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_IsAnonEndorsedEmblem(tami_p, rid, endKey, endorsedKey, endSig, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_2(rid),
                            ValidTokenIn_Verifier(rid, pair(endKey, pair(pair(pubTerm(const_end_pub()), endorsedKey), endSig)))} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_5(rid, endorsedKey)}) ==>
            (e_IsAnonEndorsedEmblem(tami_p, rid, endKey, endorsedKey, endSig, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_IsAnonEndorsedEmblem_placeDst(tami_p, rid, endKey, endorsedKey, endSig, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_8(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, endKey Term, endorsedKey Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_CollectAnonEndorsements(tami_p, rid, endKey, endorsedKey, endSig, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_5(rid, endKey),
                            ValidTokenIn_Verifier(rid, pair(endKey, pair(pair(pubTerm(const_end_pub()), endorsedKey), endSig)))} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_5(rid, endorsedKey)}) ==>
            (e_CollectAnonEndorsements(tami_p, rid, endKey, endorsedKey, endSig, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_CollectAnonEndorsements_placeDst(tami_p, rid, endKey, endorsedKey, endSig, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_9(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, endorsedKey Term, E Term, emblemSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_FinishAnonEndLoop(tami_p, rid, endorsedKey, E, emblemSig, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_5(rid, endorsedKey),
                            ValidTokenIn_Verifier(rid, pair(endorsedKey, pair(pair(pubTerm(const_emblem_pub()), E), emblemSig)))} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_0(rid),
                            OutFact_Verifier(rid, pair(pubTerm(const_SIGNED_pub()), E))}) ==>
            (e_FinishAnonEndLoop(tami_p, rid, endorsedKey, E, emblemSig, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_FinishAnonEndLoop_placeDst(tami_p, rid, endorsedKey, E, emblemSig, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_10(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, oi Term, rootKey Term, endorsedKey Term, newEndorsedKey Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_CollectInternalEndorsements(tami_p, rid, oi, rootKey, endorsedKey, newEndorsedKey, endSig, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_3(rid, oi, rootKey, endorsedKey),
                            ValidTokenIn_Verifier(rid, pair(endorsedKey, pair(oi, pair(pair(pubTerm(const_end_pub()), pair(oi, newEndorsedKey)), endSig))))} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_3(rid, oi, rootKey, newEndorsedKey)}) ==>
            (e_CollectInternalEndorsements(tami_p, rid, oi, rootKey, endorsedKey, newEndorsedKey, endSig, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_CollectInternalEndorsements_placeDst(tami_p, rid, oi, rootKey, endorsedKey, newEndorsedKey, endSig, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_11(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, oi Term, rootKey Term, endorsedKey Term, E Term, emblemSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_CollectAuthorityEndorsements(tami_p, rid, oi, rootKey, endorsedKey, E, emblemSig, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_3(rid, oi, rootKey, endorsedKey),
                            ValidTokenIn_Verifier(rid, pair(endorsedKey, pair(oi, pair(pair(pubTerm(const_emblem_pub()), pair(E, oi)), emblemSig))))} &&
             tami_ap == mset[Claim] {
                            VerifiedEndorsed(rid, oi, E, endorsedKey),
                            VerifiedRootEndorsement(rid, oi, rootKey)} &&
             tami_rp == mset[Fact] {
                            St_Verifier_4(rid, oi, rootKey),
                            OutFact_Verifier(rid, pair(pubTerm(const_SIGNED_pub()), E)),
                            OutFact_Verifier(rid, pair(pubTerm(const_ORGANIZATIONAL_pub()), pair(E, oi)))}) ==>
            (e_CollectAuthorityEndorsements(tami_p, rid, oi, rootKey, endorsedKey, E, emblemSig, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_CollectAuthorityEndorsements_placeDst(tami_p, rid, oi, rootKey, endorsedKey, E, emblemSig, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_12(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, oi Term, rootKey Term, endKey Term, auth Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_IsEndorsedEmblem(tami_p, rid, oi, rootKey, endKey, auth, endSig, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_4(rid, oi, rootKey),
                            ValidTokenIn_Verifier(rid, pair(endKey, pair(auth, pair(pair(pubTerm(const_root_end_pub()), pair(oi, rootKey)), endSig))))} &&
             tami_ap == mset[Claim] {
                            Neq(auth, oi),
                            VerifiedAuthorityEndorsement(rid, auth, endKey, oi, rootKey)} &&
             tami_rp == mset[Fact] {
                            St_Verifier_4(rid, oi, rootKey),
                            OutFact_Verifier(rid, pair(pubTerm(const_ENDORSED_pub()), auth))} &&
             (!(auth == oi))) ==>
            (e_IsEndorsedEmblem(tami_p, rid, oi, rootKey, endKey, auth, endSig, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_IsEndorsedEmblem_placeDst(tami_p, rid, oi, rootKey, endKey, auth, endSig, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiR_Verifier_13(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall rid Term, oi Term, rootKey Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact] :: 
        { e_FinishVerification(tami_p, rid, oi, rootKey, tami_lp, tami_ap, tami_rp) } (
            (M(tami_lp, tami_s) &&
             tami_lp == mset[Fact] {
                            St_Verifier_4(rid, oi, rootKey)} &&
             tami_ap == mset[Claim] {
                        } &&
             tami_rp == mset[Fact] {
                            St_Verifier_0(rid)}) ==>
            (e_FinishVerification(tami_p, rid, oi, rootKey, tami_lp, tami_ap, tami_rp) && 
             P_Verifier(get_e_FinishVerification_placeDst(tami_p, rid, oi, rootKey, tami_lp, tami_ap, tami_rp), tami_rid, U(tami_lp, tami_rp, tami_s))))
}
pred phiRG_Verifier_14(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall new_x Term :: 
        { e_PermitTokenVerificationOut(tami_p, tami_rid, new_x) }{ PermitTokenVerificationOut_Verifier(tami_rid, new_x) } (
            ((PermitTokenVerificationOut_Verifier(tami_rid, new_x) # tami_s) > 0) ==>
            (e_PermitTokenVerificationOut(tami_p, tami_rid, new_x) && 
             P_Verifier(get_e_PermitTokenVerificationOut_placeDst(tami_p, tami_rid, new_x), tami_rid, tami_s setminus mset[Fact] {
                                                                                                                          PermitTokenVerificationOut_Verifier(tami_rid, new_x)})))
}
pred phiRG_Verifier_15(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    forall new_x Term :: 
        { e_OutFact(tami_p, tami_rid, new_x) }{ OutFact_Verifier(tami_rid, new_x) } (
            ((OutFact_Verifier(tami_rid, new_x) # tami_s) > 0) ==>
            (e_OutFact(tami_p, tami_rid, new_x) && 
             P_Verifier(get_e_OutFact_placeDst(tami_p, tami_rid, new_x), tami_rid, tami_s setminus mset[Fact] {
                                                                                                       OutFact_Verifier(tami_rid, new_x)})))
}
pred phiRF_Verifier_16(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    e_InFact(tami_p, tami_rid) && 
    P_Verifier(get_e_InFact_placeDst(tami_p, tami_rid), tami_rid, tami_s union mset[Fact] {
                                                                                   InFact_Verifier(tami_rid, get_e_InFact_r1(tami_p, tami_rid))})
}
pred phiRF_Verifier_17(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    e_ValidTokenIn(tami_p, tami_rid) && 
    P_Verifier(get_e_ValidTokenIn_placeDst(tami_p, tami_rid), tami_rid, tami_s union mset[Fact] {
                                                                                         ValidTokenIn_Verifier(tami_rid, get_e_ValidTokenIn_r1(tami_p, tami_rid))})
}
pred phiRF_Verifier_18(tami_p Place, tami_rid Term, ghost tami_s mset[Fact]) {
    e_Setup_Verifier(tami_p, tami_rid) && 
    P_Verifier(get_e_Setup_Verifier_placeDst(tami_p, tami_rid), tami_rid, tami_s union mset[Fact] {
                                                                                           Setup_Verifier(tami_rid)})
}