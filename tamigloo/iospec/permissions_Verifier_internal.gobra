// +gobra
// ##(--onlyFilesWithHeader)
// ##(--disablePureFunctsTerminationRequirement)
package iospec



import . "github.com/adem-wg/adem-proto/claim"
import . "github.com/adem-wg/adem-proto/fact"
import . "github.com/adem-wg/adem-proto/term"
import . "github.com/adem-wg/adem-proto/place"
import . "github.com/adem-wg/adem-proto/pub"
import . "github.com/adem-wg/adem-proto/fresh"


// permission e_Invalid
pred e_Invalid(ghost tami_p Place, ghost rid Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_Invalid(tami_p, rid, tami_lp, tami_ap, tami_rp)
pure func get_e_Invalid_placeDst(tami_p Place, rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_Invalid(tami_p, rid, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_Invalid_placeDst(tami_p, rid, tami_lp, tami_ap, tami_rp))
func internBIO_e_Invalid(tami_p Place, rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)


// permission e_FinishSetup
pred e_FinishSetup(ghost tami_p Place, ghost rid Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_FinishSetup(tami_p, rid, tami_lp, tami_ap, tami_rp)
pure func get_e_FinishSetup_placeDst(tami_p Place, rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_FinishSetup(tami_p, rid, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_FinishSetup_placeDst(tami_p, rid, tami_lp, tami_ap, tami_rp))
func internBIO_e_FinishSetup(tami_p Place, rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)


// permission e_ReceiveToken
pred e_ReceiveToken(ghost tami_p Place, ghost rid Term, ghost t Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_ReceiveToken(tami_p, rid, t, tami_lp, tami_ap, tami_rp)
pure func get_e_ReceiveToken_placeDst(tami_p Place, rid Term, t Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_ReceiveToken(tami_p, rid, t, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_ReceiveToken_placeDst(tami_p, rid, t, tami_lp, tami_ap, tami_rp))
func internBIO_e_ReceiveToken(tami_p Place, rid Term, t Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)


// permission e_ReceiveTokenFinish
pred e_ReceiveTokenFinish(ghost tami_p Place, ghost rid Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_ReceiveTokenFinish(tami_p, rid, tami_lp, tami_ap, tami_rp)
pure func get_e_ReceiveTokenFinish_placeDst(tami_p Place, rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_ReceiveTokenFinish(tami_p, rid, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_ReceiveTokenFinish_placeDst(tami_p, rid, tami_lp, tami_ap, tami_rp))
func internBIO_e_ReceiveTokenFinish(tami_p Place, rid Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)


// permission e_IsUnsignedEmblem
pred e_IsUnsignedEmblem(ghost tami_p Place, ghost rid Term, ghost E Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_IsUnsignedEmblem(tami_p, rid, E, tami_lp, tami_ap, tami_rp)
pure func get_e_IsUnsignedEmblem_placeDst(tami_p Place, rid Term, E Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_IsUnsignedEmblem(tami_p, rid, E, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_IsUnsignedEmblem_placeDst(tami_p, rid, E, tami_lp, tami_ap, tami_rp))
func internBIO_e_IsUnsignedEmblem(tami_p Place, rid Term, E Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)


// permission e_IsSignedEmblem
pred e_IsSignedEmblem(ghost tami_p Place, ghost rid Term, ghost key Term, ghost E Term, ghost tokenSig Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_IsSignedEmblem(tami_p, rid, key, E, tokenSig, tami_lp, tami_ap, tami_rp)
pure func get_e_IsSignedEmblem_placeDst(tami_p Place, rid Term, key Term, E Term, tokenSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_IsSignedEmblem(tami_p, rid, key, E, tokenSig, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_IsSignedEmblem_placeDst(tami_p, rid, key, E, tokenSig, tami_lp, tami_ap, tami_rp))
func internBIO_e_IsSignedEmblem(tami_p Place, rid Term, key Term, E Term, tokenSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)


// permission e_IsOrganizationalEmblem
pred e_IsOrganizationalEmblem(ghost tami_p Place, ghost rid Term, ghost embKey Term, ghost oi Term, ghost E Term, ghost emblemSig Term, ghost endKey Term, ghost endSig Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_IsOrganizationalEmblem(tami_p, rid, embKey, oi, E, emblemSig, endKey, endSig, tami_lp, tami_ap, tami_rp)
pure func get_e_IsOrganizationalEmblem_placeDst(tami_p Place, rid Term, embKey Term, oi Term, E Term, emblemSig Term, endKey Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_IsOrganizationalEmblem(tami_p, rid, embKey, oi, E, emblemSig, endKey, endSig, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_IsOrganizationalEmblem_placeDst(tami_p, rid, embKey, oi, E, emblemSig, endKey, endSig, tami_lp, tami_ap, tami_rp))
func internBIO_e_IsOrganizationalEmblem(tami_p Place, rid Term, embKey Term, oi Term, E Term, emblemSig Term, endKey Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)


// permission e_IsEndorsedEmblem
pred e_IsEndorsedEmblem(ghost tami_p Place, ghost rid Term, ghost oi Term, ghost embKey Term, ghost E Term, ghost emblemSig Term, ghost endKey Term, ghost auth Term, ghost rootKey Term, ghost endSig Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_IsEndorsedEmblem(tami_p, rid, oi, embKey, E, emblemSig, endKey, auth, rootKey, endSig, tami_lp, tami_ap, tami_rp)
pure func get_e_IsEndorsedEmblem_placeDst(tami_p Place, rid Term, oi Term, embKey Term, E Term, emblemSig Term, endKey Term, auth Term, rootKey Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_IsEndorsedEmblem(tami_p, rid, oi, embKey, E, emblemSig, endKey, auth, rootKey, endSig, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_IsEndorsedEmblem_placeDst(tami_p, rid, oi, embKey, E, emblemSig, endKey, auth, rootKey, endSig, tami_lp, tami_ap, tami_rp))
func internBIO_e_IsEndorsedEmblem(tami_p Place, rid Term, oi Term, embKey Term, E Term, emblemSig Term, endKey Term, auth Term, rootKey Term, endSig Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)


// permission e_FinishVerification
pred e_FinishVerification(ghost tami_p Place, ghost rid Term, ghost oi Term, ghost tami_lp mset[Fact], ghost tami_ap mset[Claim], ghost tami_rp mset[Fact])

ghost
requires e_FinishVerification(tami_p, rid, oi, tami_lp, tami_ap, tami_rp)
pure func get_e_FinishVerification_placeDst(tami_p Place, rid Term, oi Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (placeDst Place)

ghost
requires token(tami_p) && e_FinishVerification(tami_p, rid, oi, tami_lp, tami_ap, tami_rp)
ensures token(tami_pp) && tami_pp == old(get_e_FinishVerification_placeDst(tami_p, rid, oi, tami_lp, tami_ap, tami_rp))
func internBIO_e_FinishVerification(tami_p Place, rid Term, oi Term, tami_lp mset[Fact], tami_ap mset[Claim], tami_rp mset[Fact]) (tami_pp Place)

